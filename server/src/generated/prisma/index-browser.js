
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AgendamentosScalarFieldEnum = {
  id_agendamento: 'id_agendamento',
  profissionais_id_profissional: 'profissionais_id_profissional',
  pacientes_id_paciente: 'pacientes_id_paciente',
  enderecos_id_endereco: 'enderecos_id_endereco',
  data_horario_inicio: 'data_horario_inicio',
  duracao_consulta_minutos: 'duracao_consulta_minutos',
  data_criacao: 'data_criacao',
  status: 'status',
  nota_atendimento: 'nota_atendimento',
  avaliacao: 'avaliacao'
};

exports.Prisma.EnderecosScalarFieldEnum = {
  id_endereco: 'id_endereco',
  estado: 'estado',
  cidade: 'cidade',
  apelido_endereco: 'apelido_endereco',
  cep: 'cep',
  logradouro: 'logradouro',
  numero: 'numero',
  bairro: 'bairro',
  complemento: 'complemento'
};

exports.Prisma.EspecialidadesScalarFieldEnum = {
  id_especialidade: 'id_especialidade',
  nome_especialidade: 'nome_especialidade'
};

exports.Prisma.FormacoesScalarFieldEnum = {
  id_formacao: 'id_formacao',
  formacao: 'formacao'
};

exports.Prisma.Horarios_trabalhoScalarFieldEnum = {
  id_horario_trabalho: 'id_horario_trabalho',
  profissionais_id_profissional: 'profissionais_id_profissional',
  dia_semana: 'dia_semana',
  horario_inicio: 'horario_inicio',
  horario_fim: 'horario_fim'
};

exports.Prisma.IdiomasScalarFieldEnum = {
  id_idioma: 'id_idioma',
  idioma: 'idioma'
};

exports.Prisma.PacientesScalarFieldEnum = {
  id_paciente: 'id_paciente',
  usuarios_id_usuario: 'usuarios_id_usuario',
  enderecos_id_endereco: 'enderecos_id_endereco',
  nome_paciente: 'nome_paciente',
  cpf: 'cpf',
  data_nascimento: 'data_nascimento',
  nivel_tea: 'nivel_tea',
  e_titular: 'e_titular',
  nome_titular: 'nome_titular'
};

exports.Prisma.ProfissionaisScalarFieldEnum = {
  id_profissional: 'id_profissional',
  usuarios_id_usuario: 'usuarios_id_usuario',
  enderecos_id_endereco: 'enderecos_id_endereco',
  foto_perfil_url: 'foto_perfil_url',
  nome: 'nome',
  cpf: 'cpf',
  tipo_registro: 'tipo_registro',
  numero_registro: 'numero_registro',
  uf_registro: 'uf_registro',
  descricao: 'descricao',
  valor_consulta: 'valor_consulta',
  aceita_convenio: 'aceita_convenio'
};

exports.Prisma.Profissional_especialidadesScalarFieldEnum = {
  profissionais_id_profissional: 'profissionais_id_profissional',
  especialidades_id_especialidade: 'especialidades_id_especialidade'
};

exports.Prisma.Profissional_formacoesScalarFieldEnum = {
  formacoes_id_formacao: 'formacoes_id_formacao',
  profissionais_id_profissional: 'profissionais_id_profissional'
};

exports.Prisma.Profissional_idiomasScalarFieldEnum = {
  idiomas_id_idioma: 'idiomas_id_idioma',
  profissionais_id_profissional: 'profissionais_id_profissional'
};

exports.Prisma.Profissional_tagsScalarFieldEnum = {
  tags_id_tag: 'tags_id_tag',
  profissionais_id_profissional: 'profissionais_id_profissional'
};

exports.Prisma.TagsScalarFieldEnum = {
  id_tag: 'id_tag',
  nome_tag: 'nome_tag'
};

exports.Prisma.TelefonesScalarFieldEnum = {
  id_telefone: 'id_telefone',
  usuarios_id_usuario: 'usuarios_id_usuario',
  ddd: 'ddd',
  numero: 'numero',
  tipo: 'tipo'
};

exports.Prisma.UsuariosScalarFieldEnum = {
  id_usuario: 'id_usuario',
  email: 'email',
  senha: 'senha',
  data_criacao: 'data_criacao'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.agendamentosOrderByRelevanceFieldEnum = {
  avaliacao: 'avaliacao'
};

exports.Prisma.enderecosOrderByRelevanceFieldEnum = {
  estado: 'estado',
  cidade: 'cidade',
  apelido_endereco: 'apelido_endereco',
  cep: 'cep',
  logradouro: 'logradouro',
  numero: 'numero',
  bairro: 'bairro',
  complemento: 'complemento'
};

exports.Prisma.especialidadesOrderByRelevanceFieldEnum = {
  nome_especialidade: 'nome_especialidade'
};

exports.Prisma.formacoesOrderByRelevanceFieldEnum = {
  formacao: 'formacao'
};

exports.Prisma.idiomasOrderByRelevanceFieldEnum = {
  idioma: 'idioma'
};

exports.Prisma.pacientesOrderByRelevanceFieldEnum = {
  nome_paciente: 'nome_paciente',
  cpf: 'cpf',
  nome_titular: 'nome_titular'
};

exports.Prisma.profissionaisOrderByRelevanceFieldEnum = {
  foto_perfil_url: 'foto_perfil_url',
  nome: 'nome',
  cpf: 'cpf',
  numero_registro: 'numero_registro',
  uf_registro: 'uf_registro',
  descricao: 'descricao'
};

exports.Prisma.tagsOrderByRelevanceFieldEnum = {
  nome_tag: 'nome_tag'
};

exports.Prisma.telefonesOrderByRelevanceFieldEnum = {
  ddd: 'ddd',
  numero: 'numero'
};

exports.Prisma.usuariosOrderByRelevanceFieldEnum = {
  email: 'email',
  senha: 'senha'
};
exports.agendamentos_status = exports.$Enums.agendamentos_status = {
  AGENDADO: 'AGENDADO',
  CANCELADO: 'CANCELADO',
  FINALIZADO: 'FINALIZADO'
};

exports.pacientes_nivel_tea = exports.$Enums.pacientes_nivel_tea = {
  N_VEL_1: 'N_VEL_1',
  N_VEL_2: 'N_VEL_2',
  N_VEL_3: 'N_VEL_3'
};

exports.profissionais_tipo_registro = exports.$Enums.profissionais_tipo_registro = {
  CRM: 'CRM',
  CRP: 'CRP',
  CRFa: 'CRFa',
  CREFITO: 'CREFITO',
  CREA: 'CREA'
};

exports.telefones_tipo = exports.$Enums.telefones_tipo = {
  CELULAR: 'CELULAR',
  RESIDENCIAL: 'RESIDENCIAL',
  COMERCIAL: 'COMERCIAL'
};

exports.Prisma.ModelName = {
  agendamentos: 'agendamentos',
  enderecos: 'enderecos',
  especialidades: 'especialidades',
  formacoes: 'formacoes',
  horarios_trabalho: 'horarios_trabalho',
  idiomas: 'idiomas',
  pacientes: 'pacientes',
  profissionais: 'profissionais',
  profissional_especialidades: 'profissional_especialidades',
  profissional_formacoes: 'profissional_formacoes',
  profissional_idiomas: 'profissional_idiomas',
  profissional_tags: 'profissional_tags',
  tags: 'tags',
  telefones: 'telefones',
  usuarios: 'usuarios'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
